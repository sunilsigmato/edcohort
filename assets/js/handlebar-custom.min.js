Handlebars.registerHelper('xif', function (v1, operator, v2, options) {
    switch (operator) {
        case '==':
            return (v1 == v2) ? options.fn(this) : options.inverse(this);
        case '===':
            return (v1 === v2) ? options.fn(this) : options.inverse(this);
        case '!=':
            return (v1 != v2) ? options.fn(this) : options.inverse(this);
        case '!==':
            return (v1 !== v2) ? options.fn(this) : options.inverse(this);
        case '<':
            return (v1 < v2) ? options.fn(this) : options.inverse(this);
        case '<=':
            return (v1 <= v2) ? options.fn(this) : options.inverse(this);
        case '>':
            return (v1 > v2) ? options.fn(this) : options.inverse(this);
        case '>=':
            return (v1 >= v2) ? options.fn(this) : options.inverse(this);
        case '&&':
            return (v1 && v2) ? options.fn(this) : options.inverse(this);
        case '||':
            return (v1 || v2) ? options.fn(this) : options.inverse(this);
        default:
            return options.inverse(this);
    }
});

Handlebars.registerHelper('strtotime', function(dateString) {
    // Parse the date string into a timestamp
    var timestamp = Date.parse(dateString);

    // Check if the parsing was successful
    if (!isNaN(timestamp)) {
        return timestamp;
    } else {
        return null; // or any default value indicating failure
    }
});

Handlebars.registerHelper('inArray', function(value, array, options) {
    if (Array.isArray(array) && array.indexOf(value) !== -1) {
        return options.fn(this);
    } else {
        return options.inverse(this);
    }
});



      
